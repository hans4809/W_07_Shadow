#include "Engine/Source/Runtime/Core/Math/JungleMath.h"
#include <DirectXMath.h>

#include "MathUtility.h"
#include "D3D11RHI/ShadowMapConfig.h"

using namespace DirectX;
FVector4 JungleMath::ConvertV3ToV4(const FVector vec3)
{
	FVector4 newVec4;
	newVec4.x = vec3.x;
	newVec4.y = vec3.y;
	newVec4.z = vec3.z;
	return newVec4;
}



FMatrix JungleMath::CreateModelMatrix(const FVector translation, const FVector rotation, const FVector scale)
{
    FMatrix Translation = FMatrix::CreateTranslationMatrix(translation);

    FMatrix Rotation = FMatrix::CreateRotation(rotation.x, rotation.y, rotation.z);
    //FMatrix Rotation = JungleMath::EulerToQuaternion(rotation).ToMatrix();

    FMatrix Scale = FMatrix::CreateScale(scale.x, scale.y, scale.z);
    return Scale * Rotation * Translation;
}

FMatrix JungleMath::CreateModelMatrix(const FVector translation, const FQuat rotation, const FVector scale)
{
    FMatrix Translation = FMatrix::CreateTranslationMatrix(translation);
    FMatrix Rotation = rotation.ToMatrix();
    FMatrix Scale = FMatrix::CreateScale(scale.x, scale.y, scale.z);
    return Scale * Rotation * Translation;
}
FMatrix JungleMath::CreateViewMatrix(const FVector eye, const FVector target, const FVector up)
{
    FVector zAxis = (target - eye).Normalize();  // DirectXÎäî LHÏù¥ÎØÄÎ°ú -zÍ∞Ä ÏïÑÎãàÎùº +z ÏÇ¨Ïö©
    FVector xAxis = (up.Cross(zAxis)).Normalize();
    FVector yAxis = zAxis.Cross(xAxis);

    FMatrix View;
    View.M[0][0] = xAxis.x; View.M[0][1] = yAxis.x; View.M[0][2] = zAxis.x; View.M[0][3] = 0;
    View.M[1][0] = xAxis.y; View.M[1][1] = yAxis.y; View.M[1][2] = zAxis.y; View.M[1][3] = 0;
    View.M[2][0] = xAxis.z; View.M[2][1] = yAxis.z; View.M[2][2] = zAxis.z; View.M[2][3] = 0;
    View.M[3][0] = -xAxis.Dot(eye);
    View.M[3][1] = -yAxis.Dot(eye);
    View.M[3][2] = -zAxis.Dot(eye);
    View.M[3][3] = 1;

    return View;
}

FMatrix JungleMath::CreateProjectionMatrix(const float fov, const float aspect, const float nearPlane, const float farPlane)
{
    float tanHalfFOV = tan(fov / 2.0f);
    float depth = farPlane - nearPlane;

    FMatrix Projection = {};
    Projection.M[0][0] = 1.0f / (aspect * tanHalfFOV);
    Projection.M[1][1] = 1.0f / tanHalfFOV;
    Projection.M[2][2] = farPlane / depth;
    Projection.M[2][3] = 1.0f;
    Projection.M[3][2] = -(nearPlane * farPlane) / depth;
    Projection.M[3][3] = 0.0f;  

    return Projection;
}

FMatrix JungleMath::CreateOrthoProjectionMatrix(const float width, const float height, const float nearPlane, const float farPlane)
{
    float r = width * 0.5f;
    float t = height * 0.5f;
    float invDepth = 1.0f / (farPlane - nearPlane);

    FMatrix Projection = {};
    Projection.M[0][0] = 1.0f / r;
    Projection.M[1][1] = 1.0f / t;
    Projection.M[2][2] = invDepth;
    Projection.M[3][2] = -nearPlane * invDepth;
    Projection.M[3][3] = 1.0f;

    return Projection;
}

void JungleMath::GetFrustumCornersWS(const FMatrix& camProj, const FMatrix& camView, const float zNear, const float zFar, TArray<FVector>& outCorners)
{
    const FMatrix inv = FMatrix::Inverse(camView * camProj);

    // NDC Í≥µÍ∞ÑÏùò 8Í∞ú ÏΩîÎÑà (Z: NDC Í∏∞Ï§Ä -1~1)
    const float ndc[8][3] = {
        {-1,-1,-1}, {+1,-1,-1}, {-1,+1,-1}, {+1,+1,-1},
        {-1,-1,+1}, {+1,-1,+1}, {-1,+1,+1}, {+1,+1,+1},
    };

    outCorners.Empty();
    outCorners.Reserve(8);

    for (int i = 0; i < 8; ++i)
    {
        FVector4 ptNdc(ndc[i][0], ndc[i][1], ndc[i][2], 1.0f);

        // NDC ‚Üí World
        FVector4 ptWorld4 = inv.TransformFVector4(ptNdc);

        FVector ptWorld = ptWorld4.xyz() / ptWorld4.w;
        outCorners.Add(ptWorld);
    }
}

void JungleMath::ComputeDirLightVP(const FVector& InLightDir, const FMatrix& InCamView, const FMatrix& InCamProj, const float InCascadeNear,
    const float InCascadeFar, FMatrix& OutLightView, FMatrix& OutLightProj)
{
    // 1) Ïπ¥Î©îÎùº ÌîÑÎü¨Ïä§ÌÖÄ Ïä¨ÎùºÏù¥Ïä§ ÏΩîÎÑà World Space
    TArray<FVector> corners;
    GetFrustumCornersWS(InCamProj, InCamView, InCascadeNear, InCascadeFar, corners);

    // 2) Ïä¨ÎùºÏù¥Ïä§ Ï§ëÏã¨
    FVector center(0,0,0);
    for (auto& c : corners) center += c;
    center = center / corners.Num();

    // 3) Light View Í≥ÑÏÇ∞ (upÏùÄ YÏ∂ï)
    const FVector eye = center - InLightDir.Normalize() * 1000.0f;
    OutLightView = CreateViewMatrix(eye, center, FVector(0,0,1));

    // 4) Light SpaceÏóêÏÑú AABB Íµ¨ÌïòÍ∏∞
    FVector mins( FLT_MAX,  FLT_MAX,  FLT_MAX );
    FVector maxs(-FLT_MAX, -FLT_MAX, -FLT_MAX );
    for (auto& c : corners)
    {
        FVector ls = OutLightView.TransformPosition(c);
        mins.x = FMath::Min(mins.x, ls.x);
        mins.y = FMath::Min(mins.y, ls.y);
        mins.z = FMath::Min(mins.z, ls.z);
        maxs.x = FMath::Max(maxs.x, ls.x);
        maxs.y = FMath::Max(maxs.y, ls.y);
        maxs.z = FMath::Max(maxs.z, ls.z);
    }

    // 5) ÏßÅÍµê Ìà¨ÏòÅ: Ï§ëÏã¨ÏùÑ 0,0ÏúºÎ°ú ÎßûÏ∂îÍ∏∞ ÏúÑÌï¥ width/heightÎäî extents*2
    float width  = (maxs.x - mins.x);
    float height = (maxs.y - mins.y);
    float nearZ  = mins.z;
    float farZ   = maxs.z;

    width = FMath::Max(width, 10.0f);
    height = FMath::Max(height, 10.0f);

    // JungleMathÏùò ÎåÄÏπ≠ Ïò§Ïèò Ìà¨ÏòÅ (Í∞ÄÎ°ú/ÏÑ∏Î°ú Ï†ÑÏ≤¥ ÌÅ¨Í∏∞, near, far)
    OutLightProj = CreateOrthoProjectionMatrix(width, height, nearZ, farZ);
}

void JungleMath::ComputeDirLightVP(const float centerX, const float centerY, const float centerZ, const float halfWidth, const float halfHeight,
                                   const float nearZ, const float farZ, const float lightDirX, const float lightDirY, const float lightDirZ, FMatrix& OutView, FMatrix& OutProj)
{
    // 1) ÎùºÏù¥Ìä∏ Forward Ï∂ï(normalize)
    float fx = lightDirX, fy = lightDirY, fz = lightDirZ;
    const float invL = 1.0f / std::sqrt(fx*fx + fy*fy + fz*fz);
    fx *= invL; fy *= invL; fz *= invL;

    // 2) ÎùºÏù¥Ìä∏ Right Ï∂ï = normalize(Up √ó Forward), Up=(0,0,1)
    //    cross((0,0,1),(fx,fy,fz)) = (-fy, fx, 0)
    float rx = -fy, ry = fx, rz = 0.0f;
    const float invR = 1.0f / std::sqrt(rx*rx + ry*ry + rz*rz);
    rx *= invR; ry *= invR; rz *= invR;

    // 3) ÎùºÏù¥Ìä∏ Up Ï∂ï = Forward √ó Right
    //    cross((fx,fy,fz),(rx,ry,rz))
    const float ux = fy*rz - fz*ry;
    const float uy = fz*rx - fx*rz;
    const float uz = fx*ry - fy*rx;

    // 4) Ïπ¥Î©îÎùº(ÎùºÏù¥Ìä∏) ÏúÑÏπò = center - Forward * halfWidth
    //    (halfWidthÏùÑ Frustum X Î∞©Ìñ• AABB Î∞òÌè≠ÏúºÎ°ú ÏÇ¨Ïö©)
    const float px = centerX - fx * halfWidth;
    const float py = centerY - fy * halfWidth;
    const float pz = centerZ - fz * halfWidth;

    // 5) View ÌñâÎ†¨ (row‚Äëmajor)
    //    [ rx  ry  rz  fx  ]
    //    [ ux  uy  uz  fy ]
    //    [ -dot(R, P) -dot(U, P) -dot(F, P) fz ]
    //    [  0   0   0       1     ]
    OutView.M[0][0] = rx; OutView.M[0][1] = ry; OutView.M[0][2] = rz; OutView.M[0][3] = 0.0f;

    OutView.M[1][0] = ux; OutView.M[1][1] = uy; OutView.M[1][2] = uz; OutView.M[1][3] = 0.0f;

    OutView.M[2][0] = fx; OutView.M[2][1] = fy; OutView.M[2][2] = fz; OutView.M[2][3] = 0.0f;
    
    OutView.M[3][0] = -(rx*px + ry*py + rz*pz);  OutView.M[3][1] = -(ux*px + uy*py + uz*pz); OutView.M[3][2] = -(fx*px + fy*py + fz*pz); OutView.M[3][3] = 1.0f;

    // 6) OrthoLH Projection (row‚Äëmajor)
    //    l = -halfWidth, r = +halfWidth ‚Üí width = 2*halfWidth
    //    b = -halfHeight, t = +halfHeight ‚Üí height = 2*halfHeight
    const float invW = 1.0f / halfWidth;        // = 2/(r-l)
    const float invH = 1.0f / halfHeight;       // = 2/(t-b)
    const float invD = 1.0f / (farZ - nearZ);    // = 1/(f-n)

    //    [ invW   0      0       0   ]
    //    [  0    invH    0       0   ]
    //    [  0     0     invD     0   ]
    //    [  0     0   -n*invD    1   ]
    OutProj.M[0][0] = invW;   OutProj.M[0][1] = 0.0f;  OutProj.M[0][2] = 0.0f;     OutProj.M[0][3] = 0.0f;
    OutProj.M[1][0] = 0.0f;   OutProj.M[1][1] = invH;  OutProj.M[1][2] = 0.0f;     OutProj.M[1][3] = 0.0f;
    OutProj.M[2][0] = 0.0f;   OutProj.M[2][1] = 0.0f;  OutProj.M[2][2] = invD;     OutProj.M[2][3] = 0.0f;
    OutProj.M[3][0] = 0.0f;   OutProj.M[3][1] = 0.0f;  OutProj.M[3][2] = -nearZ * invD; OutProj.M[3][3] = 1.0f;
}

FVector JungleMath::FVectorRotate(FVector& origin, const FVector& rotation)
{
    FQuat quaternion = JungleMath::EulerToQuaternion(rotation);
    // ÏøºÌÑ∞ÎãàÏñ∏ÏùÑ Ïù¥Ïö©Ìï¥ Î≤°ÌÑ∞ ÌöåÏ†Ñ Ï†ÅÏö©
    return quaternion.RotateVector(origin);
}

FQuat JungleMath::EulerToQuaternion(const FVector& eulerDegrees)
{
    float yaw = DegToRad(eulerDegrees.z);   // ZÏ∂ï Yaw
    float pitch = DegToRad(eulerDegrees.y); // YÏ∂ï Pitch
    float roll = DegToRad(eulerDegrees.x);  // XÏ∂ï Roll

    float halfYaw = yaw * 0.5f;
    float halfPitch = pitch * 0.5f;
    float halfRoll = roll * 0.5f;

    float cosYaw = cos(halfYaw);
    float sinYaw = sin(halfYaw);
    float cosPitch = cos(halfPitch);
    float sinPitch = sin(halfPitch);
    float cosRoll = cos(halfRoll);
    float sinRoll = sin(halfRoll);

    FQuat quat;
    quat.w = cosYaw * cosPitch * cosRoll + sinYaw * sinPitch * sinRoll;
    quat.x = cosYaw * cosPitch * sinRoll - sinYaw * sinPitch * cosRoll;
    quat.y = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;
    quat.z = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;

    return quat.Normalize();
}
FVector JungleMath::QuaternionToEuler(const FQuat& quat)
{
    FVector euler;

    // ÏøºÌÑ∞ÎãàÏñ∏ Ï†ïÍ∑úÌôî
    FQuat q = quat;
    FQuat normalizedQ = q.Normalize();

    // Yaw (Z Ï∂ï ÌöåÏ†Ñ)
    float sinYaw = 2.0f * (normalizedQ.w * normalizedQ.z + normalizedQ.x * normalizedQ.y);
    float cosYaw = 1.0f - 2.0f * (normalizedQ.y * normalizedQ.y + normalizedQ.z * normalizedQ.z);
    euler.z = RadToDeg(atan2(sinYaw, cosYaw));

    // Pitch (Y Ï∂ï ÌöåÏ†Ñ, ÏßêÎ≤åÎùΩ Î∞©ÏßÄ)
    float sinPitch = 2.0f * (normalizedQ.w * normalizedQ.y - normalizedQ.z * normalizedQ.x);
    if (fabs(sinPitch) >= 1.0f)
    {
        euler.y = RadToDeg(static_cast<float>(copysign(PI / 2, sinPitch))); // üî• Gimbal Lock Î∞©ÏßÄ
    }
    else
    {
        euler.y = RadToDeg(asin(sinPitch));
    }

    // Roll (X Ï∂ï ÌöåÏ†Ñ)
    float sinRoll = 2.0f * (normalizedQ.w * normalizedQ.x + normalizedQ.y * normalizedQ.z);
    float cosRoll = 1.0f - 2.0f * (normalizedQ.x * normalizedQ.x + normalizedQ.y * normalizedQ.y);
    euler.x = RadToDeg(atan2(sinRoll, cosRoll));
    return euler;
}
FVector JungleMath::FVectorRotate(FVector& origin, const FQuat& rotation)
{
    return rotation.RotateVector(origin);
}

FMatrix JungleMath::CreateRotationMatrix(const FVector rotation)
{
    XMVECTOR quatX = XMQuaternionRotationAxis(XMVectorSet(1, 0, 0, 0), DegToRad(rotation.x));
    XMVECTOR quatY = XMQuaternionRotationAxis(XMVectorSet(0, 1, 0, 0), DegToRad(rotation.y));
    XMVECTOR quatZ = XMQuaternionRotationAxis(XMVectorSet(0, 0, 1, 0), DegToRad(rotation.z));

    XMVECTOR rotationQuat = XMQuaternionMultiply(quatZ, XMQuaternionMultiply(quatY, quatX));
    rotationQuat = XMQuaternionNormalize(rotationQuat);  // Ï†ïÍ∑úÌôî ÌïÑÏàò

    XMMATRIX rotationMatrix = XMMatrixRotationQuaternion(rotationQuat);
    FMatrix result = FMatrix::Identity;  // Í∏∞Î≥∏Í∞í ÏÑ§Ï†ï (Îã®ÏúÑ ÌñâÎ†¨)

    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            result.M[i][j] = rotationMatrix.r[i].m128_f32[j];  // XMMATRIXÏóêÏÑú FMatrixÎ°ú Í∞í Î≥µÏÇ¨
        }
    }
    return result;
}


float JungleMath::RadToDeg(const float radian)
{
    return static_cast<float>(radian * (180.0f / PI));
}

float JungleMath::DegToRad(const float degree)
{
    return static_cast<float>(degree * (PI / 180.0f));
}
